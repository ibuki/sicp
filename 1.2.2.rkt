#lang racket
(define (f n)
  (cond
    ((< n 3) n)
    (else (+ (f (- n 1)) (* 2 (f (- n 2))) (* 3 (f (- n 3)))))
    ))
(define (f2 n)
  (define (f-iter a b c count)
    (if (= count 0) a
        (f-iter (+ a (* 2 b) (* 3 c)) a b (- count 1))))
  (cond ((< n 3) n)
        (else (f-iter 2 1 0 (- n 2)))))

(define (f3 n)
  (define (f-i a b c count)
    (cond ((< n 3) n)
          ((<= count 0) a)
          (else (f-i (+ a (* 2 b) (* 3 c)) a b (- count 1)))))
  (f-i 2 1 0 (- n 2)))

(f 1)
(f 2)
(f 3)
(f 4)
(f 5)
(f 6)
(f 7)
(f 8)
(f 9)
(f 10)

(f2 1)
(f2 2)
(f2 3)
(f2 4)
(f2 5)
(f2 6)
(f2 7)
(f2 8)
(f2 9)
(f2 10)

(f3 1)
(f3 2)
(f3 3)
(f3 4)
(f3 5)
(f3 6)
(f3 7)
(f3 8)
(f3 9)
(f3 10)
